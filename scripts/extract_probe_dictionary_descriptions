#!/usr/bin/env python3

from argparse import ArgumentParser
from collections import OrderedDict
import json
import os
import sys

"""
Script to parse probe-dictionary json files for descriptions and add them to
schemas if they don't already exist there.

This was only used for extracting comments from environment.json
(https://github.com/mozilla/probe-dictionary/blob/master/environment.json)
"""


parser = ArgumentParser(description=__doc__)
parser.add_argument(
    "--probe-input", help=("Input probe dictionary file"),
)

parser.add_argument(
    "--schema-output", help=("Output JSON file descriptions should be added to"),
)


def dict_path_with_parent(input_dict, parent=None, path=None, paths=[]):
    """
    Returns all possible paths of the passed dictionary including
    the parent element.

    For example, for the dictionary:

    {"env": 
      {
        "sys": "A", 
        "settings:" {
          "key": 1,
          "a": false
        }
      }
    }

    the return values would be:

    [
      [["env"], None],
      [["env", "sys"], <env dict>],
      [["env", "settings"], <env dict>],
      [["env", "settings", "key"], <settings dict>],
      [["env", "settings", "a"], <settings dict>],
    ]
    """
    if path is None:
        path = []
    for k, v in input_dict.items():
        newpath = path + [k]
        if isinstance(v, dict):
            paths = dict_path_with_parent(v, v, newpath, paths)
        else:
            paths.append([newpath, parent])

    return paths


def main():
    args = parser.parse_args()

    with open(args.probe_input, "r") as probe_input:
        # parse probe JSON file
        probe_input_data = json.load(probe_input)

        with open(args.schema_output, "r") as schema_output:
            # parse JSON schema file; retain order of json elements
            schema_output_data = json.load(schema_output, object_pairs_hook=OrderedDict)

            all_paths = dict_path_with_parent(schema_output_data)

            for [path, parent] in all_paths:
                # convert path from schema to corresponding json path in probe file
                probe_path = list(
                    filter(
                        lambda x: x != "properties"
                        and x != "type"
                        and x != "description"
                        and x != "pattern"
                        and x != "additionalProperties",
                        path,
                    )
                )

                # handle some exceptions; those are specific to environment.json
                probe_path = [
                    x if x != "activeAddons" else "activeAddons[addonId]"
                    for x in probe_path
                ]
                probe_path = [
                    x if x != "activePlugins" else "activePlugins[index]"
                    for x in probe_path
                ]

                # create final json path for probe json file
                probe_path = "{}/{}".format(probe_path[0], ".".join(probe_path[1:]))

                print(probe_path)

                if probe_path in probe_input_data:
                    # extract description from probe json file
                    entry = probe_input_data[probe_path]
                    description = entry["history"]["release"][0]["description"]

                    if "description" not in parent:
                        # update entry in schema json file
                        parent["description"] = description

            with open(args.schema_output, "w") as f:
                # write updated json schema to file
                json.dump(schema_output_data, f, ensure_ascii=False, indent=2)


if __name__ == "__main__":
    main()
